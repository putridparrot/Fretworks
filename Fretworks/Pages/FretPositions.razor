@page "/FretPositions"
@using Fretworks.ViewModels
@using PutridParrot.FretPositions
@using Fretworks.Components
@inject InstrumentSpecifications InstrumentSpecifications

<style>
    body {
    height: 100%;
    }
</style>

<style>
    .column-content {
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    border-right: 2px solid #ccc;
    }

    .column-content:last-child {
    border-right: none;
    }
</style>


<PageTitle>Fret Positions</PageTitle>


<MudGrid>
    <MudItem xs="6">
        <InstrumentSelector Selected="@_selected" AvailableInstruments="@_availableInstruments" OnCalculate="@CalculateAsync"></InstrumentSelector>
    </MudItem>
    <MudItem xs="6">
        <FretPositionsGrid FretPositions="@_fretPositions" Selected="@_selected" IsLoading="@_isLoading"/>
    </MudItem>
</MudGrid>
@code{
    private readonly SelectedViewModel _selected = new ();
    private readonly List<string> _availableInstruments = new ();

    private List<FretPositionsViewModel>? _fretPositions;
    private bool _isLoading = false;

    protected override Task OnInitializedAsync()
    {
        _isLoading = true;
        try
        {
            _availableInstruments.AddRange(InstrumentSpecifications.Specifications.Keys);
        }
        finally
        {
            _isLoading = false;
        }
        return base.OnInitializedAsync();
    }

    private Task CalculateAsync()
    {
        _isLoading = true;
        try
        {
            var calculator = new Calculator();
            if (!_selected.IsMultiScale)
            {
                // TODO:
                _fretPositions = calculator.Calculate(24, 640).Select(i => new FretPositionsViewModel
                {
                    Fret = i.Fret,
                    DistFromNut = i.DistanceFromNut,
                    DistPrevFret = i.DistanceFromPreviousFret,
                    Done = false
                }).ToList();
            }
            else
            {
                // TODO:
                _fretPositions = calculator.Calculate(24, 640).Select(i => new FretPositionsViewModel
                {
                    Fret = i.Fret,
                    DistFromNut = i.DistanceFromNut,
                    DistPrevFret = i.DistanceFromPreviousFret,
                    Done = false
                }).ToList();
            }
        }
        finally
        {
            _isLoading = false;
        }

        return Task.CompletedTask;
    }
}
